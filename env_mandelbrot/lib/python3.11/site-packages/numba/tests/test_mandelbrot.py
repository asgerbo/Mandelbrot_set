import unittest
from numba.core.compiler import compile_isolated, Flags
from numba.core import types, utils

enable_pyobj_flags = Flags()
enable_pyobj_flags.enable_pyobject = True

force_pyobj_flags = Flags()
force_pyobj_flags.force_pyobject = True


def is_in_mandelbrot(c):
    i = 0
    z = 0.0j
    for i in range(100):
        z = z ** 2 + c
        if (z.real * z.real + z.imag * z.imag) >= 4:
            return False
    return True


class TestMandelbrot(unittest.TestCase):

    def test_mandelbrot(self):
        pyfunc = is_in_mandelbrot
        cr = compile_isolated(pyfunc, (types.complex64,))
        cfunc = cr.entry_point

        points = [0+0j, 1+0j, 0+1j, 1+1j, 0.1+0.1j]
        for p in points:
            self.assertEqual(cfunc(p), pyfunc(p))


if __name__ == '__main__':
    unittest.main()
import unittest
from numba.core.compiler import compile_isolated, Flags
from numba.core import types, utils
import numpy as np
from mandelbrot import Mandelbrot

enable_pyobj_flags = Flags()
enable_pyobj_flags.enable_pyobject = True

force_pyobj_flags = Flags()
force_pyobj_flags.force_pyobject = True


def is_in_mandelbrot(c):
    i = 0
    z = 0.0j
    for i in range(100):
        z = z ** 2 + c
        if (z.real * z.real + z.imag * z.imag) >= 4:
            return False
    return True


class TestMandelbrot(unittest.TestCase):

    def test_is_in_mandelbrot(self):
        self.assertTrue(is_in_mandelbrot(0+0j))
        self.assertTrue(is_in_mandelbrot(1+0j))
        self.assertTrue(is_in_mandelbrot(0+1j))
        self.assertTrue(is_in_mandelbrot(0.1+0.1j))
        self.assertFalse(is_in_mandelbrot(1+1j))
        self.assertFalse(is_in_mandelbrot(2+2j))

    def test_set_dimensions(self):
        m = Mandelbrot(100, 100)
        self.assertEqual(m.w, 177)
        self.assertEqual(m.h, 100)
        m.set_dimensions(100, 100, 200, 200)
        self.assertEqual(m.w, 200)
        self.assertEqual(m.h, 200)

    def test_set_delta(self):
        m = Mandelbrot(100, 100)
        m.set_delta(1, 100, 100)
        self.assertEqual(m.x_delta, 1)
        self.assertEqual(m.y_delta, 1)
        m.set_delta(1, 200, 100)
        self.assertEqual(m.x_delta, 2)
        self.assertEqual(m.y_delta, 1)

    def test_new_view(self):
        m = Mandelbrot(100, 100)
        m.new_view(type('', (), {'x': 50, 'y': 50})())
        self.assertEqual(m.x_center, -0.75)
        self.assertEqual(m.y_center, 0)
        m.new_view(type('', (), {'x': 100, 'y': 100})())
        self.assertEqual(m.x_center, -0.375)
        self.assertEqual(m.y_center, 0)

    def test_zoom(self):
        m = Mandelbrot(100, 100)
        m.zoom(type('', (), {'x': 50, 'y': 50})(), 2)
        self.assertEqual(m.x_center, -0.75)
        self.assertEqual(m.y_center, 0)
        self.assertEqual(m.x_delta, 3)
        self.assertEqual(m.y_delta, 3)
        m.zoom(type('', (), {'x': 100, 'y': 100})(), 0.5)
        self.assertEqual(m.x_center, -0.375)
        self.assertEqual(m.y_center, 0)
        self.assertEqual(m.x_delta, 1.5)
        self.assertEqual(m.y_delta, 1.5)

    def test_computeSet(self):
        m = Mandelbrot(100, 100)
        m.computeSet()
        self.assertEqual(len(m.pixels), 17700)
        self.assertEqual(m.pixels[0], (0, 0, 200))

    def test_getEscapeTime(self):
        m = Mandelbrot(100, 100)
        self.assertEqual(m.getEscapeTime(50, 50), (50, 50, 200))


if __name__ == '__main__':
    unittest.main()